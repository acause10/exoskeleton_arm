// Generated by gencpp from file servo_publisher/servo_attachRequest.msg
// DO NOT EDIT!


#ifndef SERVO_PUBLISHER_MESSAGE_SERVO_ATTACHREQUEST_H
#define SERVO_PUBLISHER_MESSAGE_SERVO_ATTACHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace servo_publisher
{
template <class ContainerAllocator>
struct servo_attachRequest_
{
  typedef servo_attachRequest_<ContainerAllocator> Type;

  servo_attachRequest_()
    : servo_attach_bool(false)  {
    }
  servo_attachRequest_(const ContainerAllocator& _alloc)
    : servo_attach_bool(false)  {
  (void)_alloc;
    }



   typedef uint8_t _servo_attach_bool_type;
  _servo_attach_bool_type servo_attach_bool;





  typedef boost::shared_ptr< ::servo_publisher::servo_attachRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::servo_publisher::servo_attachRequest_<ContainerAllocator> const> ConstPtr;

}; // struct servo_attachRequest_

typedef ::servo_publisher::servo_attachRequest_<std::allocator<void> > servo_attachRequest;

typedef boost::shared_ptr< ::servo_publisher::servo_attachRequest > servo_attachRequestPtr;
typedef boost::shared_ptr< ::servo_publisher::servo_attachRequest const> servo_attachRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::servo_publisher::servo_attachRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::servo_publisher::servo_attachRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::servo_publisher::servo_attachRequest_<ContainerAllocator1> & lhs, const ::servo_publisher::servo_attachRequest_<ContainerAllocator2> & rhs)
{
  return lhs.servo_attach_bool == rhs.servo_attach_bool;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::servo_publisher::servo_attachRequest_<ContainerAllocator1> & lhs, const ::servo_publisher::servo_attachRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace servo_publisher

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::servo_publisher::servo_attachRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_publisher::servo_attachRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::servo_publisher::servo_attachRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::servo_publisher::servo_attachRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_publisher::servo_attachRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_publisher::servo_attachRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::servo_publisher::servo_attachRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1780cb17a15c46ad2593be5875f4549b";
  }

  static const char* value(const ::servo_publisher::servo_attachRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1780cb17a15c46adULL;
  static const uint64_t static_value2 = 0x2593be5875f4549bULL;
};

template<class ContainerAllocator>
struct DataType< ::servo_publisher::servo_attachRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "servo_publisher/servo_attachRequest";
  }

  static const char* value(const ::servo_publisher::servo_attachRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::servo_publisher::servo_attachRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool servo_attach_bool\n"
;
  }

  static const char* value(const ::servo_publisher::servo_attachRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::servo_publisher::servo_attachRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servo_attach_bool);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct servo_attachRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::servo_publisher::servo_attachRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::servo_publisher::servo_attachRequest_<ContainerAllocator>& v)
  {
    s << indent << "servo_attach_bool: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.servo_attach_bool);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERVO_PUBLISHER_MESSAGE_SERVO_ATTACHREQUEST_H
